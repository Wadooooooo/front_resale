// src/pages/DashboardPage.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { 
    getDashboardSalesSummary, 
    getDashboardReadyForSale,
    getNotes,          
    createNote,        
    updateNoteStatus,
    getActiveShift, 
    startShift, 
    endShift,
    getUnreadNotifications,
    markNotificationAsRead
} from '../api';
import './OrdersPage.css'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏
import './DashboardPage.css';
import { useAuth } from '../context/AuthContext';

// –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const StatCard = ({ title, value, isCurrency = true }) => (
    <div className="balance-card">
        <h4>{title}</h4>
        <p className="balance-positive">
            {isCurrency ? `${parseFloat(value).toLocaleString('ru-RU')} —Ä—É–±.` : value}
        </p>
    </div>
);

function DashboardPage() {
    const [summary, setSummary] = useState(null);
    const [readyForSale, setReadyForSale] = useState([]);
    const [serialNumber, setSerialNumber] = useState('');
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    const [notes, setNotes] = useState([]);
    const [newNoteContent, setNewNoteContent] = useState('');
    const [showAllNotes, setShowAllNotes] = useState(false);
    const { user, hasPermission } = useAuth();
    const [activeShift, setActiveShift] = useState(null);

    const [notification, setNotification] = useState({ isOpen: false, message: '' });
    const [isConfirmEndShiftModalOpen, setIsConfirmEndShiftModalOpen] = useState(false);
    const [notifications, setNotifications] = useState([]);

    useEffect(() => {
        const loadData = async () => {
            try {
                setLoading(true);
                const [summaryData, readyForSaleData, notesData, shiftData, notificationsData] = await Promise.all([
                    getDashboardSalesSummary(),
                    getDashboardReadyForSale(),
                    getNotes(showAllNotes),
                    getActiveShift(),
                    getUnreadNotifications()
                ]);
                setSummary(summaryData);
                setReadyForSale(readyForSaleData);
                setNotes(notesData);
                setActiveShift(shiftData);
                setNotifications(notificationsData); 
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥—ç—à–±–æ—Ä–¥–∞:", error);
            } finally {
                setLoading(false);
            }
        };
        loadData();
    }, [showAllNotes]);

    const handleMarkNotificationRead = async (id) => {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            await markNotificationAsRead(id);
            
            // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –Ω–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ,
            // —á—Ç–æ–±—ã –æ–Ω–æ —Å—Ä–∞–∑—É –∏—Å—á–µ–∑–ª–æ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
            setNotifications(prevNotifications => 
                prevNotifications.filter(notification => notification.id !== id)
            );
        } catch (error) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.');
        }
    };
    const handleStartShift = async () => {
        try {
            const shift = await startShift();
            setActiveShift(shift);
            setNotification({ isOpen: true, message: '–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!' });
        } catch (err) {
            setNotification({ isOpen: true, message: err.response?.data?.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.' });
        }
    };

    const handleEndShift = () => {
        setIsConfirmEndShiftModalOpen(true);
    };

    // –≠—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–∞" –≤ –æ–∫–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmAndEndShift = async () => {
        setIsConfirmEndShiftModalOpen(false); // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        try {
            await endShift();
            setActiveShift(null);
            setNotification({ isOpen: true, message: '–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' });
        } catch (err) {
            setNotification({ isOpen: true, message: err.response?.data?.detail || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É.' });
        }
    };

    const handleSearch = (e) => {
        e.preventDefault();
        if (serialNumber.trim()) {
            navigate(`/phone-history/${serialNumber.trim()}`);
        }
    };

    const handleAddNote = async (e) => {
        e.preventDefault();
        if (!newNoteContent.trim()) return;
        try {
            const newNote = await createNote(newNoteContent);
            setNotes([newNote, ...notes]);
            setNewNoteContent('');
        } catch (error) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É.');
        }
    };

    const handleToggleNote = async (noteId, currentStatus) => {
        try {
            const updatedNote = await updateNoteStatus(noteId, !currentStatus);
            setNotes(notes.map(n => n.id === noteId ? updatedNote : n));
        } catch (error) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏.');
        }
    };

    if (loading) return <h2>–ó–∞–≥—Ä—É–∑–∫–∞...</h2>;

    return (
        <div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '2rem' }}>
                <h1>–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª</h1>
                {activeShift ? (
                    <button onClick={handleEndShift} className="btn btn-danger" style={{ marginTop: 0 }}>–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É</button>
                ) : (
                    <button onClick={handleStartShift} className="btn btn-primary" style={{ marginTop: 0 }}>–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É</button>
                )}
            </div>

            {notifications.length > 0 && (
                <div className="order-page-container notifications-container">
                    <h2>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({notifications.length})</h2>
                    {notifications.map(notif => (
                        <div key={notif.id} className="notification-item">
                            <span className="notification-message">{notif.message}</span>
                            <button 
                                onClick={() => handleMarkNotificationRead(notif.id)} 
                                className="btn btn-secondary btn-compact"
                            >
                                –ü—Ä–æ—á–∏—Ç–∞–Ω–æ
                            </button>
                        </div>
                    ))}
                </div>
            )}
            
            <div className="dashboard-grid">
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
                <div className="dashboard-column">
                    <div className="order-page-container">
                        <h2>–°–≤–æ–¥–∫–∞ –∑–∞ —Å–º–µ–Ω—É</h2>
                        {summary && (
                            <div className="balances-grid">
                                <Link to="/my-sales?period=today" style={{ textDecoration: 'none', color: 'inherit' }}>
                                    <StatCard title="–ü—Ä–æ–¥–∞–∂ –∑–∞ —Å–º–µ–Ω—É" value={summary.sales_count} isCurrency={false} />
                                </Link>
                                <StatCard title="–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤ –∫–∞—Å—Å–µ" value={summary.cash_in_register} />
                                <StatCard title="–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞" value={summary.total_revenue} />
                            </div>
                        )}
                    </div>

                    <div className="order-page-container">
                        <h2>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
                            <form onSubmit={handleSearch} className="search-form-container" style={{ flexGrow: 1 }}>
                                <input
                                    type="text"
                                    value={serialNumber}
                                    onChange={(e) => setSerialNumber(e.target.value)}
                                    placeholder="–ü–æ–∏—Å–∫ –ø–æ S/N –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç–∞..."
                                    className="form-input"
                                />
                                <button type="submit" className="btn btn-primary ">–ù–∞–π—Ç–∏</button>
                            </form>
                            <Link to="/sales" className="btn btn-success" style={{ marginTop: 0, height: '50px', width: '70px' }}>
                                üõí –ü—Ä–æ–¥–∞–∂–∞
                            </Link>
                            <Link to="/stock" className="btn btn-secondary" style={{ marginTop: 0, height: '50px', width: '70px' }}>
                                üóÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                            </Link>
                        </div>
                    </div>

                    <div className="order-page-container">
                        <h2>–ù–µ–¥–∞–≤–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ</h2>
                        <table className="orders-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>–ú–æ–¥–µ–ª—å</th>
                                    <th>S/N</th>
                                </tr>
                            </thead>
                            <tbody>
                                {readyForSale.map(phone => (
                                    <tr key={phone.id} onClick={() => navigate(`/phone-history/${phone.serial_number}`)} style={{cursor: 'pointer'}}>
                                        <td>{phone.id}</td>
                                        <td>{phone.model?.name || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</td>
                                        <td>{phone.serial_number}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ */}
                <div className="dashboard-column">
                    <div className="order-page-container">
                        <div className="notes-header">
                            <h2>–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–º–µ–Ω—ã</h2>
                            <label>
                                <input type="checkbox" checked={showAllNotes} onChange={() => setShowAllNotes(!showAllNotes)} />
                                –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
                            </label>
                        </div>
                        <form onSubmit={handleAddNote} className="add-note-form">
                            <textarea
                                value={newNoteContent}
                                onChange={(e) => setNewNoteContent(e.target.value)}
                                placeholder="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã..."
                                className="form-input"
                                rows="3"
                            />
                            <button type="submit" className="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å</button>
                        </form>
                        <div className="notes-list">
                            {notes.map(note => {
                                const canToggle = !note.is_completed ||
                                                (note.completed_by && user && user.id === note.completed_by.id) ||
                                                hasPermission('manage_inventory');
                                return (
                                    <div key={note.id} className={`note-item ${note.is_completed ? 'completed' : ''}`}>
                                        <input
                                            type="checkbox"
                                            checked={note.is_completed}
                                            onChange={() => handleToggleNote(note.id, note.is_completed)}
                                            disabled={!canToggle}
                                        />
                                        <div className="note-content">
                                            <p>{note.content}</p>
                                            <small>
                                                {note.created_by.name || note.created_by.username} - {new Date(note.created_at).toLocaleString('ru-RU')}
                                                {note.is_completed && note.completed_by && (
                                                    <span> | –í—ã–ø–æ–ª–Ω–∏–ª: {note.completed_by.name || note.completed_by.username}</span>
                                                )}
                                            </small>
                                        </div>
                                    </div>
                                
                                );
                            })}
                        </div>
                    </div>
                </div>
            </div>

            {/* VVV –î–û–ë–ê–í–¨–¢–ï –í–ï–°–¨ –≠–¢–û–¢ –ë–õ–û–ö VVV */}
            {/* –û–∫–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            {notification.isOpen && (
                <div className="confirm-modal-overlay">
                    <div className="confirm-modal-dialog">
                        <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h3>
                        <p>{notification.message}</p>
                        <div className="confirm-modal-buttons">
                            <button 
                                onClick={() => setNotification({ isOpen: false, message: '' })} 
                                className="btn btn-primary"
                            >
                                OK
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* –û–∫–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã */}
            {isConfirmEndShiftModalOpen && (
                <div className="confirm-modal-overlay">
                    <div className="confirm-modal-dialog">
                        <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h3>
                        <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É?</p>
                        <div className="confirm-modal-buttons">
                            <button onClick={confirmAndEndShift} className="btn btn-danger">–î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å</button>
                            <button onClick={() => setIsConfirmEndShiftModalOpen(false)} className="btn btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
export default DashboardPage;