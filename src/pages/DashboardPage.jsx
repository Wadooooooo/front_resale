// src/pages/DashboardPage.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { getDashboardSalesSummary, getDashboardReadyForSale } from '../api';
import './OrdersPage.css'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Å—Ç–∏–ª–∏

// –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const StatCard = ({ title, value, isCurrency = true }) => (
    <div className="balance-card">
        <h4>{title}</h4>
        <p className="balance-positive">
            {isCurrency ? `${parseFloat(value).toLocaleString('ru-RU')} —Ä—É–±.` : value}
        </p>
    </div>
);

function DashboardPage() {
    const [summary, setSummary] = useState(null);
    const [readyForSale, setReadyForSale] = useState([]);
    const [serialNumber, setSerialNumber] = useState('');
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();

    useEffect(() => {
        const loadData = async () => {
            try {
                setLoading(true);
                const [summaryData, readyForSaleData] = await Promise.all([
                    getDashboardSalesSummary(),
                    getDashboardReadyForSale()
                ]);
                setSummary(summaryData);
                setReadyForSale(readyForSaleData);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥—ç—à–±–æ—Ä–¥–∞:", error);
            } finally {
                setLoading(false);
            }
        };
        loadData();
    }, []);

    const handleSearch = (e) => {
        e.preventDefault();
        if (serialNumber.trim()) {
            navigate(`/phone-history/${serialNumber.trim()}`);
        }
    };

    if (loading) return <h2>–ó–∞–≥—Ä—É–∑–∫–∞...</h2>;

    return (
        <div>
            <h1>–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –ø—Ä–æ–¥–∞–≤—Ü–∞</h1>
            
            <div className="order-page-container">
                <h2>–°–≤–æ–¥–∫–∞ –∑–∞ —Å–º–µ–Ω—É</h2>
                {summary && (
                    <div className="balances-grid">
                        <StatCard title="–ü—Ä–æ–¥–∞–∂ –∑–∞ —Å–º–µ–Ω—É" value={summary.sales_count} isCurrency={false} />
                        <StatCard title="–ù–∞–ª–∏—á–Ω—ã–º–∏ –≤ –∫–∞—Å—Å–µ" value={summary.cash_in_register} />
                        <StatCard title="–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞" value={summary.total_revenue} />
                    </div>
                )}
            </div>
            <div className="order-page-container">
                <h2>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
                    {/* VVV 2. –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –§–û–†–ú–£ –ù–ê –≠–¢–û–¢ –ë–õ–û–ö VVV */}
                    <form onSubmit={handleSearch} className="search-form-container" style={{ flexGrow: 1 }}>
                        <input
                            type="text"
                            value={serialNumber}
                            onChange={(e) => setSerialNumber(e.target.value)}
                            placeholder="–ü–æ–∏—Å–∫ –ø–æ S/N –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç–∞..."
                            className="form-input"
                        />
                        <button type="submit" className="btn btn-primary">–ù–∞–π—Ç–∏</button>
                    </form>
                    <Link to="/stock" className="btn btn-secondary" style={{ marginTop: 0 }}>
                        üóÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                    </Link>
                </div>
            </div>

            

            <div className="order-page-container">
                <h2>–ù–µ–¥–∞–≤–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ</h2>
                <table className="orders-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>–ú–æ–¥–µ–ª—å</th>
                            <th>S/N</th>
                        </tr>
                    </thead>
                    <tbody>
                        {readyForSale.map(phone => (
                            <tr key={phone.id} onClick={() => navigate(`/phone-history/${phone.serial_number}`)} style={{cursor: 'pointer'}}>
                                <td>{phone.id}</td>
                                <td>{phone.model?.name || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</td>
                                <td>{phone.serial_number}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default DashboardPage;