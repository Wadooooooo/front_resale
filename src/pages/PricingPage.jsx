import React, { useState, useEffect, useMemo } from 'react';
import { getModelStorageCombos, getAllAccessories, setPriceForPhoneCombo, addAccessoryPrice } from '../api';
import { printPriceList } from '../utils/printPriceList';
import './OrdersPage.css';

// 1. –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–†–¢–ò–†–û–í–ö–ò
const customPhoneSort = (a, b) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∫–æ–ª–µ–Ω–∏–π –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    const modelOrder = [
        'iPhone 15', 'iPhone 14', 'iPhone 13', 'iPhone 12',
        'iPhone 11', 'iPhone XS', 'iPhone XR', 'iPhone X',
        'iPhone 8', 'iPhone 7', 'iPhone 6S', 'iPhone 6', 'iPhone 5s'
    ];

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const parseDisplayName = (displayName) => {
        let generationIndex = 999; // –ù–æ–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –Ω–æ–≤–µ–µ)
        let storage = 0;         // –û–±—ä–µ–º –ø–∞–º—è—Ç–∏ –≤ –ì–ë

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ
        for (let i = 0; i < modelOrder.length; i++) {
            if (displayName.includes(modelOrder[i])) {
                generationIndex = i;
                // –î–æ–±–∞–≤–ª—è–µ–º "–≤–µ—Å" –¥–ª—è Pro/Plus –º–æ–¥–µ–ª–µ–π, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤—ã—à–µ –±–∞–∑–æ–≤—ã—Ö
                if (displayName.includes('Pro Max')) generationIndex -= 0.3;
                else if (displayName.includes('Pro')) generationIndex -= 0.2;
                else if (displayName.includes('Plus')) generationIndex -= 0.1;
                break;
            }
        }

        // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏
        const storageMatch = displayName.match(/(\d+)\s*(GB|TB)/i);
        if (storageMatch) {
            let value = parseInt(storageMatch[1], 10);
            if (storageMatch[2].toUpperCase() === 'TB') {
                value *= 1024; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –¢–ë –≤ –ì–ë –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            }
            storage = value;
        }
        
        return { generationIndex, storage };
    };

    const aInfo = parseDisplayName(a.display_name);
    const bInfo = parseDisplayName(b.display_name);

    // –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø–æ–∫–æ–ª–µ–Ω–∏—é
    if (aInfo.generationIndex !== bInfo.generationIndex) {
        return aInfo.generationIndex - bInfo.generationIndex;
    }

    // –ï—Å–ª–∏ –ø–æ–∫–æ–ª–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø–∞–º—è—Ç–∏ (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π)
    return bInfo.storage - aInfo.storage;
};


function PricingPage() {
    const [modelCombos, setModelCombos] = useState([]);
    const [accessories, setAccessories] = useState([]);
    const [newPhonePrices, setNewPhonePrices] = useState({});
    const [newAccessoryPrices, setNewAccessoryPrices] = useState({});
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState('');

    useEffect(() => {
        const loadData = async () => {
            try {
                const [modelCombosData, accessoriesData] = await Promise.all([
                    getModelStorageCombos(),
                    getAllAccessories()
                ]);
                setModelCombos(modelCombosData);
                setAccessories(accessoriesData);
            } catch (err) {
                setMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            } finally {
                setLoading(false);
            }
        };
        loadData();
    }, []);
    
    // 2. –°–û–ó–î–ê–ï–ú –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –°–ü–ò–°–û–ö –° –ü–û–ú–û–©–¨–Æ useMemo
    const sortedModelCombos = useMemo(() => {
        if (!modelCombos) return [];
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
        return [...modelCombos].sort(customPhoneSort);
    }, [modelCombos]);

    const handlePrint = () => {
        // –ü–µ—á–∞—Ç–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        printPriceList(sortedModelCombos);
    };

    const handleAccessoryPriceChange = (accessoryId, price) => {
        setNewAccessoryPrices({ ...newAccessoryPrices, [accessoryId]: price });
    };

    const handleSaveAccessoryPrice = async (accessoryId) => {
        const newPrice = newAccessoryPrices[accessoryId];
        if (!newPrice) return;
        try {
            await addAccessoryPrice(accessoryId, { price: parseFloat(newPrice) });
            setAccessories(prev => prev.map(acc => acc.id === accessoryId ? { ...acc, current_price: parseFloat(newPrice) } : acc));
            setNewAccessoryPrices(prev => ({ ...prev, [accessoryId]: '' }));
            setMessage(`–¶–µ–Ω–∞ –¥–ª—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
        } catch (err) {
            setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã.');
        }
    };

    const handlePhonePriceChange = (combo, price) => {
        const key = `${combo.model_name_id}_${combo.storage_id}`;
        setNewPhonePrices({ ...newPhonePrices, [key]: price });
    };

    const handleSavePhonePrice = async (combo) => {
        const key = `${combo.model_name_id}_${combo.storage_id}`;
        const newPrice = newPhonePrices[key];
        if (!newPrice) return;
        const priceData = {
            price: parseFloat(newPrice),
            model_name_id: combo.model_name_id,
            storage_id: combo.storage_id
        };
        try {
            await setPriceForPhoneCombo(priceData);
            setModelCombos(prev => prev.map(c => 
                (c.model_name_id === combo.model_name_id && c.storage_id === combo.storage_id) 
                ? { ...c, current_price: parseFloat(newPrice) } : c
            ));
            setNewPhonePrices(prev => ({ ...prev, [key]: '' }));
            setMessage(`–¶–µ–Ω–∞ –¥–ª—è "${combo.display_name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
        } catch (err) {
            setMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã.');
        }
    };

    if (loading) return <h2>–ó–∞–≥—Ä—É–∑–∫–∞...</h2>;

    return (
        <div>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¶–µ–Ω–∞–º–∏</h1>
                <button onClick={handlePrint} className="btn btn-secondary" style={{marginTop: 0}}>
                    üñ®Ô∏è –ü–µ—á–∞—Ç—å —Ü–µ–Ω–Ω–∏–∫–æ–≤
                </button>
            </div>
            {message && <p className="form-message success">{message}</p>}

            <div className="order-page-container">
                <h2>–¶–µ–Ω—ã –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã</h2>
                <table className="orders-table">
                    <thead>
                        <tr>
                            <th>–ú–æ–¥–µ–ª—å + –ü–∞–º—è—Ç—å</th>
                            <th>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (—Ä—É–±.)</th>
                            <th>–ù–æ–≤–∞—è —Ü–µ–Ω–∞ (—Ä—É–±.)</th>
                            <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                        </tr>
                    </thead>
                    <tbody>
                        {/* 3. –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–¢–°–û–†–¢–ò–†–û–í–ê–ù–ù–´–ô –°–ü–ò–°–û–ö –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø */}
                        {sortedModelCombos.map(combo => {
                            const key = `${combo.model_name_id}_${combo.storage_id}`;
                            return (
                                <tr key={key}>
                                    <td>{combo.display_name}</td>
                                    <td>{combo.current_price || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</td>
                                    <td>
                                        <input 
                                            type="number" 
                                            step="0.01" 
                                            className="form-input form-input-compact"
                                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
                                            value={newPhonePrices[key] || ''}
                                            onChange={e => handlePhonePriceChange(combo, e.target.value)}
                                        />
                                    </td>
                                    <td>
                                        <button 
                                            className="btn btn-primary btn-compact"
                                            onClick={() => handleSavePhonePrice(combo)}
                                        >
                                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                        </button>
                                    </td>
                                </tr>
                            )
                        })}
                    </tbody>
                </table>
            </div>

            <div className="order-page-container">
                <h2>–¶–µ–Ω—ã –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã</h2>
                <table className="orders-table">
                    <thead>
                        <tr>
                            <th>–ê–∫—Å–µ—Å—Å—É–∞—Ä</th>
                            <th>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (—Ä—É–±.)</th>
                            <th>–ù–æ–≤–∞—è —Ü–µ–Ω–∞ (—Ä—É–±.)</th>
                            <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
                        </tr>
                    </thead>
                    <tbody>
                        {accessories.map(accessory => {
                            const key = accessory.id;
                            return (
                                <tr key={key}>
                                    <td>{accessory.name}</td>
                                    <td>{accessory.current_price || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</td>
                                    <td>
                                        <input 
                                            type="number" 
                                            step="0.01" 
                                            className="form-input form-input-compact" 
                                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
                                            value={newAccessoryPrices[key] || ''}
                                            onChange={e => handleAccessoryPriceChange(key, e.target.value)}
                                        />
                                    </td>
                                    <td>
                                        <button 
                                            className="btn btn-primary btn-compact"
                                            onClick={() => handleSaveAccessoryPrice(key)}
                                        >
                                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                        </button>
                                    </td>
                                </tr>
                            )
                        })}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default PricingPage;